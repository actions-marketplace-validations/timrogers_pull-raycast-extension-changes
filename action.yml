name: 'Pull Raycast Extension Changes'
description: Store a Raycast extension in your own repo, and automatically create a PR with changes made in `raycast/extensions`
branding:
  icon: cast
  color: blue
inputs:
  github_access_token:
    description: A GitHub access token which will be used to create a PR to your repo with any changes
    required: true
  extension_name:
    description: The name of your extension. This should be the name of the folder in the `raycast/extensions` repo under `extensions/` where your extension lives.
    required: true
outputs:
  pull_request_url:
    description: The URL of the pull request to the extension repo
    value: ${{ steps.create_pull_request.outputs.url }}
runs:
  using: composite
  steps:
    - name: Check out the current repo
      uses: actions/checkout@v3
      with:
        path: my-extension
    - name: Check out the `raycast/extensions` repo
      uses: actions/checkout@v3
      with:
        repository: raycast/extensions
        path: raycast-extensions
    - name: Get SHA of most recent upstream extension changes
      id: get_most_recent_changes_sha
      run: |
        echo "::set-output name=SHA::$(git --no-pager log -1 --format="%H" extensions/${{ inputs.extension_name }})"
      shell: bash
      working-directory: raycast-extensions
    - name: Create branch for any upstream changes
      run: git checkout -b upstream-${{ steps.get_most_recent_changes_sha.outputs.SHA }}
      shell: bash
      working-directory: my-extension
    - name: Copy upstream changes
      run: cp -R extensions/${{ inputs.extension_name }}/* ../my-extension
      shell: bash
      working-directory: raycast-extensions
    - name: Check for changes
      id: check_changes
      run: |
        echo ::set-output name=changed::$(if [[ -z "$(git status --porcelain)" ]];
        then
          echo "0"
        else
          echo "1"
        fi)
      shell: bash
      working-directory: my-extension
    - name: Stage changes, ready to commit
      run: git add --all .
      shell: bash
      working-directory: my-extension
      if: steps.check_changes.outputs.changed == 1
    - name: Configure Git user information so we can commit
      run: git config user.name 'github-actions[bot]' && git config user.email 'github-actions[bot]@users.noreply.github.com'
      shell: bash
      working-directory: my-extension
      if: steps.check_changes.outputs.changed == 1
    - name: Commit upstream changes to branch
      run: git commit -m 'Sync upstream changes from ${{ steps.get_most_recent_changes_sha.outputs.SHA }} and earlier'
      shell: bash
      working-directory: my-extension
      if: steps.check_changes.outputs.changed == 1
    - name: Push upstream changes to our repo
      run: git push -f origin upstream-${{ steps.get_most_recent_changes_sha.outputs.SHA }}
      shell: bash
      working-directory: my-extension
      if: steps.check_changes.outputs.changed == 1
    - name: Create pull request (if it doesn't already exist)
      id: create_pull_request
      # If there is already a PR for this branch, then we'll skip creating a new PR and return the URL of the existing one
      run: |
        pr_url="$(gh pr create --head upstream-${{ steps.get_most_recent_changes_sha.outputs.SHA }} --title "Sync upstream changes from ${{ steps.get_most_recent_changes_sha.outputs.SHA }} and earlier" --body "This PR should be merged without modifications so that this repo reflects what is upstream in the raycast/extensions repo.")"
        echo "::set-output name=pr_url::$pr_url"
      shell: bash
      working-directory: my-extension
      env:
        GITHUB_TOKEN: ${{ inputs.github_access_token }}
      if: steps.check_changes.outputs.changed == 1